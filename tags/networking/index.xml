<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking on Victor Gaydov</title>
    <link>http://gavv.github.io/tags/networking/index.xml</link>
    <description>Recent content in Networking on Victor Gaydov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://gavv.github.io/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ephemeral ports and SO_REUSEADDR</title>
      <link>http://gavv.github.io/blog/ephemeral-port-reuse/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gavv.github.io/blog/ephemeral-port-reuse/</guid>
      <description>Ephemeral ports The ephemeral port range is a range of ports used by the kernel when the user wants the socket to be bound to a random unused port.
In particular, bind, listen, connect, and sendto may automatically allocate an ephemeral port for AF_INET and AF_INET6 sockets. This behavior is described in the ip_local_port_range section of the ip(7) man page.
This feature is not specified in POSIX but is available in many operating systems that implement BSD sockets, including Linux.</description>
    </item>
    
    <item>
      <title>PulseAudio under the hood</title>
      <link>http://gavv.github.io/blog/pulseaudio-under-the-hood/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://gavv.github.io/blog/pulseaudio-under-the-hood/</guid>
      <description>Table of contents
 Preface About PulseAudio High-level components Key abstractions D-Bus API C API Protocols and networking Device drivers Sound processing Sample cache Stream management Time management Power saving Automatic setup and routing Desktop integrations Compatibility layers Server internals Module list GUI tools Command line tools Configuration Portability Example setups Example clients and modules Critique  Preface I&amp;rsquo;m working on the Roc open-source project, a development kit for realtime streaming over an unreliable network.</description>
    </item>
    
    <item>
      <title>Using MiniSAPServer and MiniSAPListener for SAP/SDP</title>
      <link>http://gavv.github.io/blog/minisaplistener/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://gavv.github.io/blog/minisaplistener/</guid>
      <description>MiniSAPServer is a small program that periodically sends SAP/SDP messages, given a config file and destination address.
I&amp;rsquo;ve prepared a complementary MiniSAPListener program which listens for SAP/SDP messages, and prints them to stdout or passes to a shell command. The source code is mostly extracted from PulseAudio RTP receiver.
To send custom SAP/SDP messages, one should create two configuration files for MiniSAPServer, one with SAP configuration, and another with an SDP message.</description>
    </item>
    
    <item>
      <title>Reusing UNIX domain socket (SO_REUSEADDR for AF_UNIX)</title>
      <link>http://gavv.github.io/blog/unix-socket-reuse/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:01 +0000</pubDate>
      
      <guid>http://gavv.github.io/blog/unix-socket-reuse/</guid>
      <description>Unix domain sockets are a networkless version of Internet sockets.
They have several advantages:
 Unix domain sockets are files, so file-system permissions may be used for them when one end is closed (e.g. process exits), SIGPIPE is delivered to another end performance may be up to 2x better  See details here.
Lack of SO_REUSEADDR A socket file is created by bind(2) call. If the file already exists, EADDRINUSE is returned.</description>
    </item>
    
  </channel>
</rss>
